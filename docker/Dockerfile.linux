FROM buildkite/agent:3-ubuntu-24.04

SHELL ["bash", "-lic"]

# Replace archive.ubuntu.com with Finnish mirror
RUN sed -i 's/archive\.ubuntu/fi\.archive\.ubuntu/g' /etc/apt/sources.list.d/ubuntu.sources && \
    sed -i 's/security\.ubuntu/fi\.archive\.ubuntu/g' /etc/apt/sources.list.d/ubuntu.sources

RUN curl -fsSL https://apertium.projectjj.com/apt/install-nightly.sh | bash
RUN apt-get update && \
    DEBIAN_FRONTEND=noninteractive \
    apt-get install -y \
    build-essential \
    cmake \
    libssl-dev \
    imagemagick \
    pkg-config \
    unzip \
    rsync \
    crossbuild-essential-arm64 \
    apertium-all-dev \
    divvun-gramcheck \
    patchelf \
    libsqlite3-dev \
    libboost-all-dev \
    libc++-dev \
    libc++abi-dev \
    libicu-dev \
    bc

RUN curl -fsSL https://download.pytorch.org/libtorch/cpu/libtorch-cxx11-abi-shared-with-deps-2.4.1%2Bcpu.zip -o libtorch.zip && \
    unzip libtorch.zip && \
    cp -r libtorch/* /usr/ && \
    rm -rf libtorch && \
    rm libtorch.zip

RUN curl https://sh.rustup.rs -sSf | sh -s -- -y
RUN ~/.cargo/bin/cargo install cross --git https://github.com/cross-rs/cross

RUN curl -fsSL https://deno.land/install.sh | bash -s -- -y

RUN curl -fsSL https://github.com/openbao/openbao/releases/download/v2.2.1/bao_2.2.1_linux_amd64.deb -o bao.deb && \
    dpkg -i bao.deb && \
    rm bao.deb

RUN apt-get update && \
    apt-get install -y ca-certificates curl && \
    install -m 0755 -d /etc/apt/keyrings && \
    curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc && \
    chmod a+r /etc/apt/keyrings/docker.asc && \
    echo \
        "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \
        $(. /etc/os-release && echo "${UBUNTU_CODENAME:-$VERSION_CODENAME}") stable" | \
        tee /etc/apt/sources.list.d/docker.list > /dev/null && \
    apt-get update && \
    apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin

RUN ~/.cargo/bin/cargo install cargo-ndk --git https://github.com/bbqsrc/cargo-ndk
RUN ~/.cargo/bin/rustup target add \
    aarch64-linux-android \
    armv7-linux-androideabi \
    x86_64-linux-android

RUN curl -fsSL https://dl.google.com/android/repository/android-ndk-r27c-linux.zip -o android-ndk.zip && \
    mkdir -p ~/Android/Sdk/ndk && \
    unzip android-ndk.zip && \
    mv android-ndk-r27c ~/Android/Sdk/ndk/27.2.12479018 && \
    rm android-ndk.zip

# Install pahkat-uploader
RUN curl -fsSL 'https://pahkat.uit.no/devtools/download/pahkat-uploader?platform=linux&channel=nightly' -o pahkat-uploader.txz && \
    tar -xf pahkat-uploader.txz -C /usr/local && \
    rm pahkat-uploader.txz

# Install thfst-tools
RUN curl -fsSL 'https://pahkat.uit.no/artifacts/thfst-tools_1.0.0-alpha.2_linux_amd64.txz' -o thfst-tools.txz && \
    tar -xf thfst-tools.txz -C /usr/local && \
    rm thfst-tools.txz

# Install aws-cli
RUN curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip" && \
    unzip awscliv2.zip && \
    ./aws/install && \
    rm awscliv2.zip

# Install just
RUN ~/.cargo/bin/cargo install just

ENV BUILDKITE_PLUGIN_FS_CACHE_FOLDER="/var/cache/buildkite"
RUN mkdir -p $BUILDKITE_PLUGIN_FS_CACHE_FOLDER

ENTRYPOINT []